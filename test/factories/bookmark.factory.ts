import { Bookmark, Transcription, DailyDigest, BookmarkSource, TranscriptionStatus, DigestStatus } from "../../bookmarks/types";
import { randomUUID } from "crypto";

/**
 * Test Data Factories for Bookmarks Service
 *
 * Provides factory functions to generate consistent test data
 * for bookmarks, transcriptions, daily digests, and external API responses.
 */

// ============================================
// Domain Object Factories
// ============================================

/**
 * Creates a test bookmark with sensible defaults
 */
export function createTestBookmark(overrides?: Partial<Bookmark>): Bookmark {
  const id = Math.floor(Math.random() * 1000000);
  return {
    id,
    user_id: randomUUID(),
    url: "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
    title: "Test Video - Never Gonna Give You Up",
    source: BookmarkSource.YOUTUBE,
    client_time: new Date("2025-01-01T12:00:00Z"),
    metadata: null,
    created_at: new Date("2025-01-01T12:00:00Z"),
    updated_at: new Date("2025-01-01T12:00:00Z"),
    ...overrides,
  };
}

/**
 * Creates a test transcription with all fields populated
 */
export function createTestTranscription(overrides?: Partial<Transcription>): Transcription {
  const id = Math.floor(Math.random() * 1000000);
  const bookmarkId = Math.floor(Math.random() * 1000000);

  return {
    id,
    bookmark_id: bookmarkId,
    transcript: "This is a test transcript from a video about software engineering best practices.",
    deepgram_summary: "Test summary generated by Deepgram: Video discusses software engineering best practices.",
    summary: "Test summary generated by OpenAI: This video provides an overview of modern software engineering practices.",
    sentiment: "positive",
    sentiment_score: 0.85,
    deepgram_response: createTestDeepgramResponse(),
    duration: 120.5,
    confidence: 0.95,
    status: TranscriptionStatus.COMPLETED,
    error_message: null,
    processing_started_at: new Date("2025-01-01T12:00:00Z"),
    processing_completed_at: new Date("2025-01-01T12:05:00Z"),
    created_at: new Date("2025-01-01T12:00:00Z"),
    updated_at: new Date("2025-01-01T12:05:00Z"),
    ...overrides,
  };
}

/**
 * Creates a test daily digest with sensible defaults
 */
export function createTestDailyDigest(overrides?: Partial<DailyDigest>): DailyDigest {
  const id = Math.floor(Math.random() * 1000000);

  return {
    id,
    digest_date: new Date("2025-01-01T00:00:00Z"),
    user_id: randomUUID(),
    status: DigestStatus.COMPLETED,
    bookmark_count: 5,
    sources_breakdown: { youtube: 3, podcast: 2 },
    date_range_start: new Date("2025-01-01T00:00:00Z"),
    date_range_end: new Date("2025-01-01T23:59:59.999Z"),
    digest_content: "Here's your daily digest with 5 bookmarks: 3 YouTube videos and 2 podcast episodes.",
    total_duration: 600.0,
    processing_metadata: {
      modelUsed: "gpt-4.1-mini",
      summarizationStrategy: "map-reduce",
      processingDurationMs: 5000,
    },
    error_message: null,
    processing_started_at: new Date("2025-01-01T21:00:00Z"),
    processing_completed_at: new Date("2025-01-01T21:00:05Z"),
    created_at: new Date("2025-01-01T21:00:00Z"),
    updated_at: new Date("2025-01-01T21:00:05Z"),
    ...overrides,
  };
}

// ============================================
// External API Response Factories
// ============================================

/**
 * Creates a test Deepgram API response with audio intelligence features
 * Matches the structure expected by extractDeepgramData utility
 */
export function createTestDeepgramResponse(overrides?: any) {
  return {
    results: {
      channels: [
        {
          alternatives: [
            {
              transcript: "This is a test transcript from a video about software engineering best practices.",
              confidence: 0.95,
              words: [
                { word: "This", start: 0.0, end: 0.2, confidence: 0.98 },
                { word: "is", start: 0.2, end: 0.35, confidence: 0.97 },
                { word: "a", start: 0.35, end: 0.42, confidence: 0.96 },
                { word: "test", start: 0.42, end: 0.7, confidence: 0.95 },
              ],
              paragraphs: {
                transcript: "This is a test transcript from a video about software engineering best practices.",
                paragraphs: [
                  {
                    sentences: [
                      {
                        text: "This is a test transcript from a video about software engineering best practices.",
                        start: 0.0,
                        end: 5.0,
                      },
                    ],
                    start: 0.0,
                    end: 5.0,
                    num_words: 15,
                  },
                ],
              },
            },
          ],
        },
      ],
      sentiments: {
        average: {
          sentiment: "positive",
          sentiment_score: 0.85,
        },
        segments: [
          {
            text: "This is a test transcript from a video about software engineering best practices.",
            start_word: 0,
            end_word: 14,
            sentiment: "positive",
            sentiment_score: 0.85,
          },
        ],
      },
      summary: {
        short: "Test Deepgram summary: Video discusses software engineering best practices.",
        result: "success",
      },
    },
    metadata: {
      model_info: {
        name: "nova-3",
        version: "2025-01-15",
        arch: "nova",
      },
      request_id: "test-deepgram-request-id-12345",
      duration: 120.5,
      channels: 1,
      created: "2025-01-01T12:00:00Z",
    },
    ...overrides,
  };
}

/**
 * Creates a test OpenAI Responses API response
 * Matches the structure expected by OpenAI service
 */
export function createTestOpenAIResponse(overrides?: any) {
  return {
    output_text: "This is a test OpenAI summary generated from the transcript. It provides key insights about the content.",
    usage: {
      prompt_tokens: 100,
      completion_tokens: 50,
      total_tokens: 150,
    },
    model: "gpt-4.1-mini",
    created: 1704110400,
    ...overrides,
  };
}

// ============================================
// Event Factories
// ============================================

/**
 * Creates a BookmarkCreatedEvent for testing processors
 */
export function createBookmarkCreatedEvent(overrides?: any) {
  return {
    bookmarkId: Math.floor(Math.random() * 1000000),
    url: "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
    source: BookmarkSource.WEB,
    title: undefined,
    ...overrides,
  };
}

/**
 * Creates a BookmarkSourceClassifiedEvent for testing processors
 */
export function createBookmarkSourceClassifiedEvent(overrides?: any) {
  return {
    bookmarkId: Math.floor(Math.random() * 1000000),
    source: BookmarkSource.YOUTUBE,
    url: "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
    title: "Test Video",
    ...overrides,
  };
}

/**
 * Creates an AudioDownloadedEvent for testing processors
 */
export function createAudioDownloadedEvent(overrides?: any) {
  const bookmarkId = Math.floor(Math.random() * 1000000);
  return {
    bookmarkId,
    audioBucketKey: `audio-${bookmarkId}-dQw4w9WgXcQ.mp3`,
    source: BookmarkSource.YOUTUBE,
    metadata: { videoId: "dQw4w9WgXcQ" },
    ...overrides,
  };
}

/**
 * Creates an AudioTranscribedEvent for testing processors
 */
export function createAudioTranscribedEvent(overrides?: any) {
  return {
    bookmarkId: Math.floor(Math.random() * 1000000),
    transcript: "This is a test transcript from a video about software engineering best practices.",
    source: BookmarkSource.YOUTUBE,
    ...overrides,
  };
}

// ============================================
// Utility Helpers
// ============================================

/**
 * Creates a YouTube bookmark with sensible YouTube-specific defaults
 */
export function createYouTubeBookmark(overrides?: Partial<Bookmark>): Bookmark {
  return createTestBookmark({
    source: BookmarkSource.YOUTUBE,
    url: "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
    title: "Test YouTube Video",
    ...overrides,
  });
}

/**
 * Creates a Podcast bookmark with sensible Podcast-specific defaults
 */
export function createPodcastBookmark(overrides?: Partial<Bookmark>): Bookmark {
  return createTestBookmark({
    source: BookmarkSource.PODCAST,
    url: "https://podcasts.apple.com/us/podcast/test-podcast/id123456789",
    title: "Test Podcast Episode",
    ...overrides,
  });
}

/**
 * Creates a Web bookmark with sensible Web-specific defaults
 */
export function createWebBookmark(overrides?: Partial<Bookmark>): Bookmark {
  return createTestBookmark({
    source: BookmarkSource.WEB,
    url: "https://example.com/article/test-article",
    title: "Test Web Article",
    ...overrides,
  });
}

/**
 * Creates a pending transcription (no data yet)
 */
export function createPendingTranscription(overrides?: Partial<Transcription>): Transcription {
  return createTestTranscription({
    status: TranscriptionStatus.PENDING,
    transcript: null,
    deepgram_summary: null,
    summary: null,
    sentiment: null,
    sentiment_score: null,
    deepgram_response: null,
    duration: null,
    confidence: null,
    processing_started_at: null,
    processing_completed_at: null,
    ...overrides,
  });
}

/**
 * Creates a failed transcription with error message
 */
export function createFailedTranscription(overrides?: Partial<Transcription>): Transcription {
  return createTestTranscription({
    status: TranscriptionStatus.FAILED,
    error_message: "Test error: Audio download failed due to network timeout",
    processing_completed_at: new Date("2025-01-01T12:05:00Z"),
    ...overrides,
  });
}

/**
 * Creates a pending daily digest (no content yet)
 */
export function createPendingDailyDigest(overrides?: Partial<DailyDigest>): DailyDigest {
  return createTestDailyDigest({
    status: DigestStatus.PENDING,
    digest_content: null,
    total_duration: null,
    processing_metadata: null,
    processing_started_at: null,
    processing_completed_at: null,
    ...overrides,
  });
}

/**
 * Creates a failed daily digest with error message
 */
export function createFailedDailyDigest(overrides?: Partial<DailyDigest>): DailyDigest {
  return createTestDailyDigest({
    status: DigestStatus.FAILED,
    digest_content: null,
    error_message: "Test error: OpenAI API rate limit exceeded",
    processing_completed_at: new Date("2025-01-01T21:00:05Z"),
    ...overrides,
  });
}
